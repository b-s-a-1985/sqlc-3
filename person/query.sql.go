// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package person

import (
	"context"
)

const createSchema = `-- name: CreateSchema :exec
CREATE SCHEMA IF NOT EXISTS test8 AUTHORIZATION postgres
`

func (q *Queries) CreateSchema(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createSchema)
	return err
}

const createTable = `-- name: CreateTable :exec
CREATE TABLE IF NOT EXISTS department(
    department_id SERIAL PRIMARY KEY,
    department_name VARCHAR(20) NOT NULL
)
`

func (q *Queries) CreateTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createTable)
	return err
}

const insertDepartment = `-- name: InsertDepartment :exec
INSERT INTO department (department_name)
VALUES ($1)
`

func (q *Queries) InsertDepartment(ctx context.Context, departmentName string) error {
	_, err := q.db.ExecContext(ctx, insertDepartment, departmentName)
	return err
}

const listDepartments = `-- name: ListDepartments :many
SELECT department_id, department_name FROM department
`

func (q *Queries) ListDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, listDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.DepartmentID, &i.DepartmentName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSchema = `-- name: SetSchema :exec
SET search_path TO test8
`

func (q *Queries) SetSchema(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setSchema)
	return err
}
